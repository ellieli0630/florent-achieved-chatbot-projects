[
{
	"comment":"create new event owner with phone 1-234-567-8901 named 'John Smith' ",
	"conditions": {
		"intent": "statement",
		"verbs":["create"],
		"objects":["owner"],
		"match":["$Phone <- graph_data['phone']","$Name <- graph_data['quote']"]
	},
	"action": ["$Node <- Node(main_graph,{'type':'owner','name':'$Name','phone':'$Phone'})","$ID <- action_vars['$Node']['id']"],
	"answer": "Created new event owner $Name with phone $Phone and id = $ID "

},

{       "comment":"create new event named 'Great Music Event' that will be held at 11-06-2016  10:00 am to 12:00 am",
	"conditions": {
		"intent": "statement",
		"verbs":["create"],
		"objects":["event"],
		"match":["$EventName <- graph_data['quote']",
		         "$Date <- graph_data['date'][0]",
		         "$TimeStart <- graph_data['datetime'][0]",
		         "$TimeEnd <- graph_data['datetime'][1]"
		
		]
	},
	"action": ["$Node <- Node(main_graph,{'type':'event','name':'$EventName','date':'$Date','start_time':$TimeStart,'end_time':$TimeEnd})"
	          ,"$ID <- action_vars['$Node']['id']"
	          ,"$Subsribers <- Node(main_graph,{'type':'subscribers'})"
	          ,"main_graph.AddEdge(action_vars['$Node'],action_vars['$Subsribers'])"
	          ],
	"answer": "New event $EventName  created with id = $ID , with date $Date "

},

{       "comment":"set owner 'John Smith' for event with id  5",
	"conditions": {
		"intent": "statement",
		"verbs":["set"],
		"objects":["owner","event"],
		"match":["$ID <- graph_data['number']","$OwnerName <- graph_data['quote']"]

		
	},
	"action": ["$EventNode <- main_graph.Match({'type':'event','id':'$ID'})[0]",
	
	           "$OwnerNode <- main_graph.Match({'type':'owner','name':'$OwnerName'})[0]",
	           "$EventName <- action_vars['$EventNode']['name']",
	           "main_graph.AddEdge(action_vars['$EventNode'],action_vars['$OwnerNode'])"],
	           
	"answer": "Ok, event with name $EventName is now owned by $OwnerName , $ID "

},


{       "comment":"remove event with id = 6",
	"conditions": {
		"intent": "statement",
		"verbs":["remove"],
		"objects":["event","id"],
		"match":["$ID <- graph_data['number']"]

		
	},
	"action": ["$EventNode <- main_graph.Match({'type':'event','id':'$ID'})[0]",
	           "main_graph.DeleteNode(action_vars['$EventNode'])"],
	"answer": "Deleted node with id = $ID "
	}
,
{       "comment":"set default reply to 'We are glad to see at our event!' for event with id  5",
	"conditions": {
		"intent": "statement",
		"verbs":["set"],
		"objects":["reply","event"],
		"match":["$ID <- graph_data['number']","$ReplyText <- graph_data['quote']"]
		
	},
         "action": ["$EventNode <- main_graph.Match({'type':'event','id':'$ID'})[0]",
                     "$EventName <- action_vars['$EventNode']['name']",
                     "main_graph.UpdateNodeProperty(action_vars['$EventNode'], 'message', '$ReplyText')"],  
         
         "answer": "Ok, default reply message for event with name $EventName is set to ' $ReplyText ' "

},


{       "comment":"set event name  'Best music event' for event with id = 5",
	"conditions": {
		"intent": "statement",
		"verbs":["set"],
		"objects":["event name"],
		"match":["$ID <- graph_data['number']","$NewName <- graph_data['quote']"]
		
	},
         "action": ["$EventNode <- main_graph.Match({'type':'event','id':'$ID'})[0]",
                     "$EventName <- action_vars['$EventNode']['name']",
                     "main_graph.UpdateNodeProperty(action_vars['$EventNode'], 'name', '$NewName')"],  
         
         "answer": "Ok, the name for event with name $EventName is set to ' $NewName '"

},


{       "comment":"set place name  'Best place' for place with id  = 5",
	"conditions": {
		"intent": "statement",
		"verbs":["set"],
		"objects":["place name"],
		"match":["$ID <- graph_data['number']","$NewName <- graph_data['quote']"]
		
	},
         "action": ["$PlaceNode <- main_graph.Match({'type':'place','id':'$ID'})[0]",
                     "$PlaceName <- action_vars['$PlaceNode']['name']",
                     "main_graph.UpdateNodeProperty(action_vars['$PlaceNode'], 'name', '$NewName')"],  
         
         "answer": "Ok, the name for event with name $PlaceName is set to ' $NewName '"

},




{       "comment":"set place 'Best place' for event with id  2",
	"conditions": {
		"intent": "statement",
		"verbs":["set"],
		"objects":["place","event"],
		"match":["$ID <- graph_data['number']","$PlaceName <- graph_data['quote']"]

		
	},
	"action": ["$EventNode <- main_graph.Match({'type':'event','id':'$ID'})[0]",
	
	           "$PlaceNode <- main_graph.Match({'type':'place','name':'$PlaceName'})[0]",
	           "$EventName <- action_vars['$EventNode']['name']",
	           "main_graph.AddEdge(action_vars['$EventNode'],action_vars['$PlaceNode'])",
	           "main_graph.AddEdge(action_vars['$PlaceNode'],action_vars['$EventNode'])"],
	           
	"answer": "Ok, event with name $EventName is located at $PlaceName "

},

{       "comment":"show all events with owners and places",
	"conditions": {
		"intent": "statement",
		"verbs":["show"],
		"objects":["owners and places","events"]
		
	},
	"action": ["$Events <- main_graph.Match({'type':'event'}).Match(lambda x: (x.children({'type':'owner'}).NotEmpty()) and (x.children({'type':'place'}).NotEmpty())   )",
	 "$List <- '\\n'.join([x['id'] + ' ' + x['name'] + ' ' + (x.child({'type':'owner'}))['name'] + ' ' + (x.child({'type':'place'}))['name'] for x in action_vars['$Events']])"
	         
	
	            ],
	           
	"answer": "I know following events that have owners and places: \n $List"

},

{       "comment":"show all events with owners",
	"conditions": {
		"intent": "statement",
		"verbs":["show"],
		"objects":["owners","events"]
		
	},
	"action": ["$Events <- main_graph.Match({'type':'event'}).Match(lambda x: x.children({'type':'owner'}).NotEmpty())",
	 "$List <- '\\n'.join([x['id'] + ' ' + x['name'] + ' ' + (x.child({'type':'owner'}))['name'] for x in action_vars['$Events']])"
	         
	
	            ],
	           
	"answer": "I know following events that have owners: \n $List"

},





{       "comment":"create new place named 'The best place'",
	"conditions": {
		"intent": "statement",
		"verbs":["create"],
		"objects":["place"],
		"match":["$PlaceName <- graph_data['quote']"]
	},
	"action": ["$Node <- Node(main_graph,{'type':'place','name':'$PlaceName'})","$ID <- action_vars['$Node']['id']"],
	"answer": "New place $PlaceName created with id = $ID"

},
{
	"comment":"show all event owners'",
	"conditions": {
		"intent": "statement",
		"verbs":["show"],
		"objects":["owners"]
	},
	"action": ["$Owners <- main_graph.Match({'type':'owner'})",
	           "$List <- '\\n'.join([x['id'] + ' ' + x['name'] + ' ' + x['phone'] for x in action_vars['$Owners']])"],
	"answer": "I know following event owners: \n $List"

}
,

{
	"comment":"show all events",
	"conditions": {
		"intent": "statement",
		"verbs":["show"],
		"objects":["events"]
	},
	"action": ["$Events <- main_graph.Match({'type':'event'})",
	           "$List <- '\\n'.join([x['id'] + ' ' + x['name'] + ' ' + pdate(x['start_time']) + ' ' + pdate(x['end_time']) for x in action_vars['$Events']])"],
	"answer": "I know following events: \n $List"

},

{
	"comment":"show all places",
	"conditions": {
		"intent": "statement",
		"verbs":["show"],
		"objects":["places"]
	},
	"action": ["$Events <- main_graph.Match({'type':'place'})",
	           "$List <- '\\n'.join([x['id'] + ' ' + x['name'] for x in action_vars['$Events']])"],
	"answer": "I know following places: \n $List"

},


{
	"comment":"show all subscribers for event 'Great Music Event'",
	"conditions": {
		"intent": "statement",
		"verbs":["show"],
		"objects":["event"],
		"match":  ["$EventName <- graph_data['quote']"]
	},
	"action": ["$Event <- main_graph.Match({'type':'event','name':'$EventName'}).First()",
	           "$Subscribers <- action_vars['$Event'].child({'type':'subscribers'}).children({'type':'user'})",
	           "$List <- '\\n'.join([x['id'] + ' ' + x['phone'] for x in action_vars['$Subscribers']])"],
	"answer": "I know following subscribers for event $EventName : \n $List"

},

{
	"conditions": {
		"intent": "question",
		"objects":["name","event","id"],
		"match":["$ID <- graph_data['number']"]
		
	},
	"action" : ["$Name <- main_graph.Match({'type':'event','id':'$ID'}).First()['name']"],
	"answer": "$Name"
},

{
        "comment":"what is default reply for event with id = 5",
	"conditions": {
		"intent": "question",
		"objects":["reply","event","id"],
		"match":["$ID <- graph_data['number']"]
		
	},
	"action" : ["$Name <- main_graph.Match({'type':'event','id':'$ID'}).First()['message']"],
	"answer": "$Name"
},



{
	"conditions": {
		"intent": "question",
		"objects":["name","event","id"],
		"match":["$Name <- graph_data['quote']"]
		
	},
	"action" : ["$Id <- main_graph.Match({'type':'event','name':'$Name'}).First()['id']"],
	"answer": "$Id"
},


{
   "conditions": {
		"pattern": "QB:{<@><a>}",
		"match":["$EventName <- graph_data['quote']",
		         "$EventMessage <- main_graph.Match({'type':'event','name':action_vars['$EventName']})[0]['message']"
		         
		        ]		
		
	},
	
	"answer": "$EventMessage"
},

{
   "conditions": {
		"pattern": "QB:{<@><subscribe>}",
		"match":["$EventName <- graph_data['quote']",
		         "$EventMessage <- main_graph.Match({'type':'event','name':action_vars['$EventName']})[0]['message']",
		         "$Phone <- graph_data['user_phone']"
		         
		         
		        ]		
		
	},
	"action":["$Subscriber <- Node(main_graph,{'type':'user','phone':'$Phone'},make_or_fetch=True)",
	          "$EventSubscribers <- main_graph.Match({'type':'event','name':'$EventName'}).First().child({'type':'subscribers'})",
	          "main_graph.AddEdge(action_vars['$EventSubscribers'],action_vars['$Subscriber'])"
	          
	         ],
	"answer": "$EventMessage"
},




{
   "conditions": {
                "comment": "event message from location",
		"pattern": "QB:{<@><a>}",
		"match":["$PlaceName <- graph_data['quote']",
		         "$MessageTime <- graph_data['message_time']",
		         "$EventMessage <- main_graph.Match({'type':'place','name':action_vars['$PlaceName']})[0].children({'type':'event'}).Match(lambda x,curtime=action_vars['$MessageTime']:   float(curtime)>float(x['start_time']) and float(curtime)<float(x['end_time'])  )[0]['message']"
		         ]

	},
	
	"answer": "$EventMessage location map"
},



{
   "conditions": {
		"pattern": "QB:{<@><a>}"

	},
	
	"answer": "Thank you for feedback. Sorry we don't know this event or place yet."
},




	{       "comment":"@subsribers send message to 'We are glad to see!' to all subscribers for event with id=4",

		"conditions": {
                "pattern": "QB:{@subsribers}",  
		"match":  ["$ID <- graph_data['number']","$ReplyText <- graph_data['quote']"
					]
	},
		"action": ["$Event <- main_graph.Match({'type':'event','id':'$ID'}).First()",
	           "$Subscribers <- action_vars['$Event'].child({'type':'subscribers'}).children({'type':'user'})",
	           "$Phone <- '\\n'.join([x['phone'] for x in action_vars['$Subscribers']])"],
         "answer": "ok, message sent "

}


]






