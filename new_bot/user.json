[
{
   "conditions": {
		"pattern": "QB:{<@><feedback>}",
		"match":["$EventName <- graph_data['quote']",
		         "$EventMessage <- main_graph.Match({'type':'event','name':action_vars['$EventName']})[0]['message']",
				 "$User_phone <- graph_data['user_phone']"

		        ]

	},
	"action": ["$PlaceName <- main_graph.Match({'type':'event', 'name':'$EventName'})[0].child({'type':'place'})['name']",
				"$Phone <- graph_data['user_phone']"],
	"answer": "$EventMessage \n The night is still young. Looking for more booze and fun? Let us know where do you wanna go next, we will find you the best spots nearby!",
	"store":{
	   "objects":["placesview"],
		"place": ["$PlaceName"]

	   }
},



{
   "conditions": {
                "comment": "event message from location",
		"pattern": "QB:{<@><a>}",
		"match":["$PlaceName <- graph_data['quote']",
		         "$MessageTime <- graph_data['message_time']",
				 "$User_phone <- graph_data['user_phone']",
		         "$EventMessage <- main_graph.Match({'type':'place','name':action_vars['$PlaceName']})[0].children({'type':'event'}).Match(lambda x,curtime=action_vars['$MessageTime']:   float(curtime)>float(x['start_time']) and float(curtime)<float(x['end_time'])  )[0]['message']"
		         ]
		
		
	},
	"action":["$Phone <- graph_data['user_phone']"],
	"answer": "$EventMessage location map"
},



{
   "conditions": {
	    "match": ["$User_phone <- graph_data['user_phone']"],
		"pattern": "QB:{<@><a>}"
		
		
		
	},
	"action":["$Phone <- graph_data['user_phone']"],
	"answer": "Thank you for feedback. Sorry we don't know this event or place yet."
},


	{       "comment":"@subsribers send message to 'We are glad to see!' to all subscribers for event with id=4",

		"conditions": {

		"match":  ["$ID <- graph_data['number']","$ReplyText <- graph_data['quote']", "$Phone <- graph_data['user_phone']",
					"$Owner <- main_graph.Match({'type':'event', 'id':action_vars['$ID']})[0].children({'type':'owner', 'phone':action_vars['$Phone']})[0]['name']"
					]
	},
		"action": ["$Event <- main_graph.Match({'type':'event','id':'$ID'}).First()",
	           		"$Subscribers <- action_vars['$Event'].child({'type':'subscribers'}).children({'type':'user'})",
	           		"$Phone <- '\\n'.join([x['phone'] for x in action_vars['$Subscribers']])"
					],
         "answer": " $ReplyText"

},


{
   "conditions": {
		"pattern": "QB:{<@><subscribe>}",
		"match":["$EventName <- graph_data['quote']",
		         "$EventMessage <- main_graph.Match({'type':'event','name':action_vars['$EventName']})[0]['message']",
		         "$User_phone <- graph_data['user_phone']"


		        ]

	},
	"action":[ "$Phone <- graph_data['user_phone']" ,
			  "$Subscriber <- Node(main_graph,{'type':'user','phone':'$Phone'},make_or_fetch=True)",
	          "$EventSubscribers <- main_graph.Match({'type':'event','name':'$EventName'}).First().child({'type':'subscribers'})",
	          "main_graph.AddEdge(action_vars['$EventSubscribers'],action_vars['$Subscriber'])",
	          "$PlaceName <- main_graph.Match({'type':'event', 'name':'$EventName'})[0].child({'type':'place'})['name']"
	         ],
	"answer": " Thanks for subscribing! We look forward to staying in touch! \n The night is still young. Looking for more booze and fun? Let us know where do you wanna go next, we will find you the best spots nearby!Â ",
	"store":{
	   "objects":["placesview"],
		"place": ["$PlaceName"]

	   }
},



	{
   "conditions": {
		"pattern": "QB:{<@><subscriber><yes>}",
	    "match": ["$User_phone <- graph_data['user_phone']"],
	    "objects":["placesview"]

	},
	"action":["$Place <- graph_data['place'][0]", "$Phone <- graph_data['user_phone']"],
	"answer": " OK, write to 'show me bars/restaurants' or 'show me 'bars' ('clubs' ect.)' ",
	"store":{
	   "objects":["listplace"],
		"place":["$Place"]
	   }
},

		{
   "conditions": {
		"pattern": "QB:{<@><subscriber><no>}",
	   "match": ["$User_phone <- graph_data['user_phone']"],
		"objects":["placesview"]
	},
	"action":["$Phone <- graph_data['user_phone']"],
	"answer": " Thank you for feedback. "
},


	{
   "conditions": {
		"pattern": "QB:{<@><subscriber><show><me><bars/restaurants>}",
	    "match": ["$User_phone <- graph_data['user_phone']"],
	    "objects":["listplace"]

	},
	"action":[  "$Place <- graph_data['place'][0]",
				"$Address <-  main_graph.Match({'type':'place','name':action_vars['$Place']})[0]['address']",
			    "$List1 <- graph_data['fun'](location=action_vars['$Address'], type1='bars',limit=2)",
			    "$List2 <- graph_data['fun'](location=action_vars['$Address'], query='restaurants', limit=2)",
				"$Phone <- graph_data['user_phone']"
				],
	"answer": "Here is a list of awesome places nearby, check it out! \n $List1 \n $List2 ",
	"store":{
	   "objects":["more"],
		"place":["$Place"]
	   }
},


	{
   "conditions": {
		"pattern": "QB:{<@><subscriber><show><me><more>}",
	    "match": ["$User_phone <- graph_data['user_phone']"],
	    "objects":["more"]

	},
	"action":[  "$Place <- graph_data['place'][0]",
				"$Address <-  main_graph.Match({'type':'place','name':action_vars['$Place']})[0]['address']",
			    "$List1 <- graph_data['fun'](location=action_vars['$Address'], offset=3, type1='bars', limit=6)",
			    "$List2 <- graph_data['fun'](location=action_vars['$Address'], offset=3, query='restaurants', limit=6)",
				"$Phone <- graph_data['user_phone']"
				],
	"answer": "Here is a list of awesome places nearby, check it out! \n $List1 \n $List2 ",
	"objects":["listplace"],
	"place":["$Place"]

},

		{

   "conditions": {
	   "comment":"@subscriber show me 'bars' ",
	   "pattern": "QB:{<@><subscriber><show><me><.*>}",
	   "objects":["listplace"],
	    "match": ["$Keyword <- graph_data['quote']", "$User_phone <- graph_data['user_phone']"]
	},
	"action":[	"$Place <- graph_data['place'][0]",
				"$Address <-  main_graph.Match({'type':'place','name':action_vars['$Place']})[0]['address']",
				"$List <- graph_data['fun'](location=action_vars['$Address'], query='$Keyword')",
				"$Phone <- graph_data['user_phone']"
					],

	"answer": "Here is a list of selected places on phrase $Keyword \n $List",
	"objects":["listplace"]

},

{
   "conditions": {
	    "match": ["$User_phone <- graph_data['user_phone']"],
		"pattern": "QB:{<show><cafe>}"

	},

	"action":["$List <- graph_data['fun'](location='Arlington Heights, LA', type1='coffee')",
				"$Phone <- graph_data['user_phone']"
			],
	"answer": "list of cafe in LA: \n $List"

},

{
   "conditions": {
                "comment": "event message from location",
		"pattern": "QB:{<@><a>}",
		"match":["$PlaceName <- graph_data['quote']",
		         "$MessageTime <- graph_data['message_time']",
		         "$EventMessage <- main_graph.Match({'type':'place','name':action_vars['$PlaceName']})[0].children({'type':'event'}).Match(lambda x,curtime=action_vars['$MessageTime']:   float(curtime)>float(x['start_time']) and float(curtime)<float(x['end_time'])  )[0]['message']",
		        "$User_phone <- graph_data['user_phone']"
				]

	},

	"action":["$Phone <- graph_data['user_phone']"],
	"answer": "$EventMessage location map"
},



{
   "conditions": {
	    "match": ["$User_phone <- graph_data['user_phone']"],
		"pattern": "QB:{<@><a>}"

	},
	"action":["$Phone <- graph_data['user_phone']"],
	"answer": "Thank you for feedback. Sorry we don't know this event or place yet."
}



]